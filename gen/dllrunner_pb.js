// source: dllrunner.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.dllrunner.Argument', null, global);
goog.exportSymbol('proto.dllrunner.FieldType', null, global);
goog.exportSymbol('proto.dllrunner.FieldTypeEnum', null, global);
goog.exportSymbol('proto.dllrunner.RunDllRequest', null, global);
goog.exportSymbol('proto.dllrunner.RunDllResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dllrunner.FieldType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dllrunner.FieldType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dllrunner.FieldType.displayName = 'proto.dllrunner.FieldType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dllrunner.Argument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dllrunner.Argument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dllrunner.Argument.displayName = 'proto.dllrunner.Argument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dllrunner.RunDllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dllrunner.RunDllRequest.repeatedFields_, null);
};
goog.inherits(proto.dllrunner.RunDllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dllrunner.RunDllRequest.displayName = 'proto.dllrunner.RunDllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dllrunner.RunDllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dllrunner.RunDllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dllrunner.RunDllResponse.displayName = 'proto.dllrunner.RunDllResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dllrunner.FieldType.prototype.toObject = function(opt_includeInstance) {
  return proto.dllrunner.FieldType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dllrunner.FieldType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.FieldType.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    structShapeMap: (f = msg.getStructShapeMap()) ? f.toObject(includeInstance, proto.dllrunner.FieldType.toObject) : [],
    arrayShape: (f = msg.getArrayShape()) && proto.dllrunner.FieldType.toObject(includeInstance, f),
    arrayLength: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dllrunner.FieldType}
 */
proto.dllrunner.FieldType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dllrunner.FieldType;
  return proto.dllrunner.FieldType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dllrunner.FieldType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dllrunner.FieldType}
 */
proto.dllrunner.FieldType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dllrunner.FieldTypeEnum} */ (reader.readEnum());
      msg.setFieldType(value);
      break;
    case 2:
      var value = msg.getStructShapeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.dllrunner.FieldType.deserializeBinaryFromReader, "", new proto.dllrunner.FieldType());
         });
      break;
    case 3:
      var value = new proto.dllrunner.FieldType;
      reader.readMessage(value,proto.dllrunner.FieldType.deserializeBinaryFromReader);
      msg.setArrayShape(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArrayLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dllrunner.FieldType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dllrunner.FieldType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dllrunner.FieldType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.FieldType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStructShapeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.dllrunner.FieldType.serializeBinaryToWriter);
  }
  f = message.getArrayShape();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dllrunner.FieldType.serializeBinaryToWriter
    );
  }
  f = message.getArrayLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional FieldTypeEnum field_type = 1;
 * @return {!proto.dllrunner.FieldTypeEnum}
 */
proto.dllrunner.FieldType.prototype.getFieldType = function() {
  return /** @type {!proto.dllrunner.FieldTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dllrunner.FieldTypeEnum} value
 * @return {!proto.dllrunner.FieldType} returns this
 */
proto.dllrunner.FieldType.prototype.setFieldType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, FieldType> struct_shape = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.dllrunner.FieldType>}
 */
proto.dllrunner.FieldType.prototype.getStructShapeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.dllrunner.FieldType>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.dllrunner.FieldType));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dllrunner.FieldType} returns this
 */
proto.dllrunner.FieldType.prototype.clearStructShapeMap = function() {
  this.getStructShapeMap().clear();
  return this;};


/**
 * optional FieldType array_shape = 3;
 * @return {?proto.dllrunner.FieldType}
 */
proto.dllrunner.FieldType.prototype.getArrayShape = function() {
  return /** @type{?proto.dllrunner.FieldType} */ (
    jspb.Message.getWrapperField(this, proto.dllrunner.FieldType, 3));
};


/**
 * @param {?proto.dllrunner.FieldType|undefined} value
 * @return {!proto.dllrunner.FieldType} returns this
*/
proto.dllrunner.FieldType.prototype.setArrayShape = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dllrunner.FieldType} returns this
 */
proto.dllrunner.FieldType.prototype.clearArrayShape = function() {
  return this.setArrayShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dllrunner.FieldType.prototype.hasArrayShape = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 array_length = 4;
 * @return {number}
 */
proto.dllrunner.FieldType.prototype.getArrayLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dllrunner.FieldType} returns this
 */
proto.dllrunner.FieldType.prototype.setArrayLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dllrunner.Argument.prototype.toObject = function(opt_includeInstance) {
  return proto.dllrunner.Argument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dllrunner.Argument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.Argument.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: (f = msg.getValue()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f),
    structShapeMap: (f = msg.getStructShapeMap()) ? f.toObject(includeInstance, proto.dllrunner.FieldType.toObject) : [],
    arrayShape: (f = msg.getArrayShape()) && proto.dllrunner.FieldType.toObject(includeInstance, f),
    arrayLength: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dllrunner.Argument}
 */
proto.dllrunner.Argument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dllrunner.Argument;
  return proto.dllrunner.Argument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dllrunner.Argument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dllrunner.Argument}
 */
proto.dllrunner.Argument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dllrunner.FieldTypeEnum} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = msg.getStructShapeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.dllrunner.FieldType.deserializeBinaryFromReader, "", new proto.dllrunner.FieldType());
         });
      break;
    case 4:
      var value = new proto.dllrunner.FieldType;
      reader.readMessage(value,proto.dllrunner.FieldType.deserializeBinaryFromReader);
      msg.setArrayShape(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArrayLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dllrunner.Argument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dllrunner.Argument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dllrunner.Argument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.Argument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = message.getStructShapeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.dllrunner.FieldType.serializeBinaryToWriter);
  }
  f = message.getArrayShape();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dllrunner.FieldType.serializeBinaryToWriter
    );
  }
  f = message.getArrayLength();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional FieldTypeEnum type = 1;
 * @return {!proto.dllrunner.FieldTypeEnum}
 */
proto.dllrunner.Argument.prototype.getType = function() {
  return /** @type {!proto.dllrunner.FieldTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dllrunner.FieldTypeEnum} value
 * @return {!proto.dllrunner.Argument} returns this
 */
proto.dllrunner.Argument.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Value value = 2;
 * @return {?proto.google.protobuf.Value}
 */
proto.dllrunner.Argument.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 2));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.dllrunner.Argument} returns this
*/
proto.dllrunner.Argument.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dllrunner.Argument} returns this
 */
proto.dllrunner.Argument.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dllrunner.Argument.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, FieldType> struct_shape = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.dllrunner.FieldType>}
 */
proto.dllrunner.Argument.prototype.getStructShapeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.dllrunner.FieldType>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.dllrunner.FieldType));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dllrunner.Argument} returns this
 */
proto.dllrunner.Argument.prototype.clearStructShapeMap = function() {
  this.getStructShapeMap().clear();
  return this;};


/**
 * optional FieldType array_shape = 4;
 * @return {?proto.dllrunner.FieldType}
 */
proto.dllrunner.Argument.prototype.getArrayShape = function() {
  return /** @type{?proto.dllrunner.FieldType} */ (
    jspb.Message.getWrapperField(this, proto.dllrunner.FieldType, 4));
};


/**
 * @param {?proto.dllrunner.FieldType|undefined} value
 * @return {!proto.dllrunner.Argument} returns this
*/
proto.dllrunner.Argument.prototype.setArrayShape = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dllrunner.Argument} returns this
 */
proto.dllrunner.Argument.prototype.clearArrayShape = function() {
  return this.setArrayShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dllrunner.Argument.prototype.hasArrayShape = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 array_length = 5;
 * @return {number}
 */
proto.dllrunner.Argument.prototype.getArrayLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.dllrunner.Argument} returns this
 */
proto.dllrunner.Argument.prototype.setArrayLength = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dllrunner.RunDllRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dllrunner.RunDllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dllrunner.RunDllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dllrunner.RunDllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.RunDllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dllPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    funcName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    returnType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.dllrunner.Argument.toObject, includeInstance),
    structShapeMap: (f = msg.getStructShapeMap()) ? f.toObject(includeInstance, proto.dllrunner.FieldType.toObject) : [],
    arrayShape: (f = msg.getArrayShape()) && proto.dllrunner.FieldType.toObject(includeInstance, f),
    arrayLength: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dllrunner.RunDllRequest}
 */
proto.dllrunner.RunDllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dllrunner.RunDllRequest;
  return proto.dllrunner.RunDllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dllrunner.RunDllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dllrunner.RunDllRequest}
 */
proto.dllrunner.RunDllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDllPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncName(value);
      break;
    case 3:
      var value = /** @type {!proto.dllrunner.FieldTypeEnum} */ (reader.readEnum());
      msg.setReturnType(value);
      break;
    case 4:
      var value = new proto.dllrunner.Argument;
      reader.readMessage(value,proto.dllrunner.Argument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 5:
      var value = msg.getStructShapeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.dllrunner.FieldType.deserializeBinaryFromReader, "", new proto.dllrunner.FieldType());
         });
      break;
    case 6:
      var value = new proto.dllrunner.FieldType;
      reader.readMessage(value,proto.dllrunner.FieldType.deserializeBinaryFromReader);
      msg.setArrayShape(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArrayLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dllrunner.RunDllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dllrunner.RunDllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dllrunner.RunDllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.RunDllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDllPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFuncName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReturnType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dllrunner.Argument.serializeBinaryToWriter
    );
  }
  f = message.getStructShapeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.dllrunner.FieldType.serializeBinaryToWriter);
  }
  f = message.getArrayShape();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.dllrunner.FieldType.serializeBinaryToWriter
    );
  }
  f = message.getArrayLength();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string dll_path = 1;
 * @return {string}
 */
proto.dllrunner.RunDllRequest.prototype.getDllPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.setDllPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string func_name = 2;
 * @return {string}
 */
proto.dllrunner.RunDllRequest.prototype.getFuncName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.setFuncName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FieldTypeEnum return_type = 3;
 * @return {!proto.dllrunner.FieldTypeEnum}
 */
proto.dllrunner.RunDllRequest.prototype.getReturnType = function() {
  return /** @type {!proto.dllrunner.FieldTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.dllrunner.FieldTypeEnum} value
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.setReturnType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Argument arguments = 4;
 * @return {!Array<!proto.dllrunner.Argument>}
 */
proto.dllrunner.RunDllRequest.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.dllrunner.Argument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dllrunner.Argument, 4));
};


/**
 * @param {!Array<!proto.dllrunner.Argument>} value
 * @return {!proto.dllrunner.RunDllRequest} returns this
*/
proto.dllrunner.RunDllRequest.prototype.setArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.dllrunner.Argument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dllrunner.Argument}
 */
proto.dllrunner.RunDllRequest.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dllrunner.Argument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};


/**
 * map<string, FieldType> struct_shape = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.dllrunner.FieldType>}
 */
proto.dllrunner.RunDllRequest.prototype.getStructShapeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.dllrunner.FieldType>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.dllrunner.FieldType));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.clearStructShapeMap = function() {
  this.getStructShapeMap().clear();
  return this;};


/**
 * optional FieldType array_shape = 6;
 * @return {?proto.dllrunner.FieldType}
 */
proto.dllrunner.RunDllRequest.prototype.getArrayShape = function() {
  return /** @type{?proto.dllrunner.FieldType} */ (
    jspb.Message.getWrapperField(this, proto.dllrunner.FieldType, 6));
};


/**
 * @param {?proto.dllrunner.FieldType|undefined} value
 * @return {!proto.dllrunner.RunDllRequest} returns this
*/
proto.dllrunner.RunDllRequest.prototype.setArrayShape = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.clearArrayShape = function() {
  return this.setArrayShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dllrunner.RunDllRequest.prototype.hasArrayShape = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 array_length = 7;
 * @return {number}
 */
proto.dllrunner.RunDllRequest.prototype.getArrayLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.dllrunner.RunDllRequest} returns this
 */
proto.dllrunner.RunDllRequest.prototype.setArrayLength = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dllrunner.RunDllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dllrunner.RunDllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dllrunner.RunDllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.RunDllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dllrunner.RunDllResponse}
 */
proto.dllrunner.RunDllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dllrunner.RunDllResponse;
  return proto.dllrunner.RunDllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dllrunner.RunDllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dllrunner.RunDllResponse}
 */
proto.dllrunner.RunDllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dllrunner.RunDllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dllrunner.RunDllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dllrunner.RunDllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dllrunner.RunDllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Value response = 1;
 * @return {?proto.google.protobuf.Value}
 */
proto.dllrunner.RunDllResponse.prototype.getResponse = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 1));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.dllrunner.RunDllResponse} returns this
*/
proto.dllrunner.RunDllResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dllrunner.RunDllResponse} returns this
 */
proto.dllrunner.RunDllResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dllrunner.RunDllResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.dllrunner.FieldTypeEnum = {
  STRING: 0,
  INT: 1,
  CHAR: 2,
  FLOAT: 3,
  DOUBLE: 4,
  BOOLEAN: 5,
  VOID: 6,
  STRUCT: 7,
  ARRAY: 8,
  POINTER: 9,
  BYTE: 10,
  LONG: 11,
  INT64: 12,
  INT8: 13,
  INT16: 14,
  INT32: 15,
  UINT8: 16,
  UINT16: 17,
  UINT32: 18,
  UINT64: 19,
  LONGLONG: 20,
  SHORT: 21,
  USHORT: 22,
  SIZE_T: 23,
  UCHAR: 24,
  UINT: 25,
  ULONG: 26,
  ULONGLONG: 27
};

goog.object.extend(exports, proto.dllrunner);
